// Package relconfig contains the config yaml object for the relayer.
package relconfig

import (
	"fmt"
	"math/big"
	"os"
	"reflect"
	"strings"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/jftuga/ellipsis"
	"github.com/synapsecns/sanguine/ethergo/signer/config"
	submitterConfig "github.com/synapsecns/sanguine/ethergo/submitter/config"
	"gopkg.in/yaml.v2"

	"path/filepath"
)

// Config represents the configuration for the relayer.
// TODO: validation function.
//
//go:generate go run github.com/vburenin/ifacemaker -f config.go -s Config -i IConfig -p relconfig -o iconfig_generated.go -c "autogenerated file"
type Config struct {
	// Chains is a map of chainID -> chain config.
	Chains map[int]ChainConfig `yaml:"bridges"`
	// BaseChainConfig applies to all chains except those values that are overriden in Chains.
	BaseChainConfig ChainConfig `yaml:"base_chain_config"`
	// OmniRPCURL is the URL of the OmniRPC server.
	OmniRPCURL string `yaml:"omnirpc_url"`
	// RfqAPIURL is the URL of the RFQ API.
	RfqAPIURL string `yaml:"rfq_url"`
	// RelayerAPIPort is the port of the relayer API.
	RelayerAPIPort string `yaml:"relayer_api_port"`
	// Database is the database config.
	Database DatabaseConfig `yaml:"database"`
	// QuotableTokens is a map of token -> list of quotable tokens.
	QuotableTokens map[string][]string `yaml:"quotable_tokens"`
	// Signer is the signer config.
	Signer config.SignerConfig `yaml:"signer"`
	// Submitter is the submitter config.
	SubmitterConfig submitterConfig.Config `yaml:"submitter_config"`
	// FeePricer is the fee pricer config.
	FeePricer FeePricerConfig `yaml:"fee_pricer"`
	// ScreenerAPIUrl is the TRM API key.
	ScreenerAPIUrl string `yaml:"screener_api_url"`
	// BaseDeadlineBufferSeconds is the deadline buffer for relaying a transaction.
	BaseDeadlineBufferSeconds int `yaml:"base_deadline_buffer_seconds"`
}

// ChainConfig represents the configuration for a chain.
type ChainConfig struct {
	// Bridge is the bridge confirmation count.
	Bridge string `yaml:"address"`
	// Confirmations is the number of required confirmations
	Confirmations uint64 `yaml:"confirmations"`
	// Tokens is a map of token ID -> token config.
	Tokens map[string]TokenConfig `yaml:"tokens"`
	// NativeToken is the native token of the chain (pays gas).
	NativeToken string `yaml:"native_token"`
	// DeadlineBufferSeconds is the deadline buffer for relaying a transaction.
	DeadlineBufferSeconds int `yaml:"deadline_buffer_seconds"`
	// OriginGasEstimate is the gas estimate to use for origin transactions (this will override base gas estimates).
	OriginGasEstimate int `yaml:"origin_gas_estimate"`
	// DestGasEstimate is the gas estimate to use for destination transactions (this will override base gas estimates).
	DestGasEstimate int `yaml:"dest_gas_estimate"`
	// L1FeeChainID indicates the chain ID for the L1 fee (if needed, for example on optimism).
	L1FeeChainID uint32 `yaml:"l1_fee_chain_id"`
	// L1FeeOriginGasEstimate is the gas estimate for the L1 fee on origin.
	L1FeeOriginGasEstimate int `yaml:"l1_fee_origin_gas_estimate"`
	// L1FeeDestGasEstimate is the gas estimate for the L1 fee on destination.
	L1FeeDestGasEstimate int `yaml:"l1_fee_dest_gas_estimate"`
	// MinGasToken is minimum amount of gas that should be leftover after bridging a gas token.
	MinGasToken string `yaml:"min_gas_token"`
	// QuotePct is the percent of balance to quote.
	QuotePct float64 `yaml:"quote_pct"`
	// QuoteOffsetBps is the number of basis points to deduct from the dest amount.
	QuoteOffsetBps float64 `yaml:"quote_offset_bps"`
	// FixedFeeMultiplier is the multiplier for the fixed fee.
	FixedFeeMultiplier float64 `yaml:"fixed_fee_multiplier"`
}

// TokenConfig represents the configuration for a token.
type TokenConfig struct {
	// Address is the token address.
	Address string `yaml:"address"`
	// Decimals is the token decimals.
	Decimals uint8 `yaml:"decimals"`
	// For now, specify the USD price of the token in the config.
	PriceUSD float64 `yaml:"price_usd"`
	// MinQuoteAmount is the minimum amount to quote for this token in human-readable units.
	MinQuoteAmount string `yaml:"min_quote_amount"`
}

// DatabaseConfig represents the configuration for the database.
type DatabaseConfig struct {
	Type string `yaml:"type"`
	DSN  string `yaml:"dsn"` // Data Source Name
}

// FeePricerConfig represents the configuration for the fee pricer.
type FeePricerConfig struct {
	// BaseOriginGasEstimate is the gas required to execute prove + claim transactions on origin chain.
	BaseOriginGasEstimate int `yaml:"base_origin_gas_estimate"`
	// BaseDestGasEstimate is the gas required to execute relay transaction on destination chain.
	BaseDestGasEstimate int `yaml:"base_dest_gas_estimate"`
	// GasPriceCacheTTLSeconds is the TTL for the gas price cache.
	GasPriceCacheTTLSeconds int `yaml:"gas_price_cache_ttl"`
	// TokenPriceCacheTTLSeconds is the TTL for the token price cache.
	TokenPriceCacheTTLSeconds int `yaml:"token_price_cache_ttl"`
}

// LoadConfig loads the config from the given path.
func LoadConfig(path string) (config Config, err error) {
	input, err := os.ReadFile(filepath.Clean(path))
	if err != nil {
		return Config{}, fmt.Errorf("failed to read file: %w", err)
	}
	err = yaml.Unmarshal(input, &config)
	if err != nil {
		return Config{}, fmt.Errorf("could not unmarshall config %s: %w", ellipsis.Shorten(string(input), 30), err)
	}
	return config, nil
}

// GetChains returns the chains config.
func (c Config) GetChains() map[int]ChainConfig {
	return c.Chains
}

// GetOmniRPCURL returns the OmniRPCURL.
func (c Config) GetOmniRPCURL() string {
	return c.OmniRPCURL
}

// GetRfqAPIURL returns the RFQ API URL.
func (c Config) GetRfqAPIURL() string {
	return c.RfqAPIURL
}

// GetDatabase returns the database config.
func (c Config) GetDatabase() DatabaseConfig {
	return c.Database
}

// GetSigner returns the signer config.
func (c Config) GetSigner() config.SignerConfig {
	return c.Signer
}

// GetFeePricer returns the fee pricer config.
func (c Config) GetFeePricer() FeePricerConfig {
	return c.FeePricer
}

// GetTokenID returns the tokenID for the given chain and address.
func (c Config) GetTokenID(chain int, addr string) (string, error) {
	chainConfig, ok := c.Chains[int(chain)]
	if !ok {
		return "", fmt.Errorf("no chain config for chain %d", chain)
	}
	for tokenID, tokenConfig := range chainConfig.Tokens {
		if tokenConfig.Address == addr {
			return tokenID, nil
		}
	}
	return "", fmt.Errorf("no tokenID found for chain %d and address %s", chain, addr)
}

// GetQuotableTokens returns the quotable tokens for the given token.
func (c Config) GetQuotableTokens(token string) ([]string, error) {
	tokens, ok := c.QuotableTokens[token]
	if !ok {
		return nil, fmt.Errorf("no quotable tokens for token %s", token)
	}
	return tokens, nil
}

// GetNativeToken returns the native token for the given chain.
func (c Config) GetNativeToken(chainID uint32) (string, error) {
	chainConfig, ok := c.Chains[int(chainID)]
	if !ok {
		return "", fmt.Errorf("could not get chain config for chainID: %d", chainID)
	}
	if len(chainConfig.NativeToken) == 0 {
		return "", fmt.Errorf("chain config for chainID %d does not have a native token", chainID)
	}
	return chainConfig.NativeToken, nil
}

// GetTokenDecimals returns the token decimals for the given chain and token.
func (c Config) GetTokenDecimals(chainID uint32, token string) (uint8, error) {
	chainConfig, ok := c.Chains[int(chainID)]
	if !ok {
		return 0, fmt.Errorf("could not get chain config for chainID: %d", chainID)
	}
	for tokenName, tokenConfig := range chainConfig.Tokens {
		if token == tokenName {
			return tokenConfig.Decimals, nil
		}
	}
	return 0, fmt.Errorf("could not get token decimals for chain %d and token %s", chainID, token)
}

// GetTokens returns the tokens for the given chain.
func (c Config) GetTokens(chainID uint32) (map[string]TokenConfig, error) {
	chainConfig, ok := c.Chains[int(chainID)]
	if !ok {
		return nil, fmt.Errorf("could not get chain config for chainID: %d", chainID)
	}
	return chainConfig.Tokens, nil
}

// GetTokenName returns the token name for the given chain and address.
func (c Config) GetTokenName(chain uint32, addr string) (string, error) {
	chainConfig, ok := c.Chains[int(chain)]
	if !ok {
		return "", fmt.Errorf("no chain config for chain %d", chain)
	}
	for tokenName, tokenConfig := range chainConfig.Tokens {
		// TODO: probably a better way to do this.
		if strings.ToLower(tokenConfig.Address) == strings.ToLower(addr) {
			return tokenName, nil
		}
	}
	return "", fmt.Errorf("no tokenName found for chain %d and address %s", chain, addr)
}

func (c Config) getChainConfig(chainID int) (ChainConfig, error) {
	chainConfig, ok := c.Chains[chainID]
	if !ok {
		return ChainConfig{}, fmt.Errorf("no chain config for chain %d", chainID)
	}
	return chainConfig, nil
}

const defaultMinQuoteAmount = 0

// GetMinQuoteAmount returns the quote amount for the given chain and address.
// Note that this getter returns the value in native token decimals.
func (c Config) GetMinQuoteAmount(chainID int, addr common.Address) *big.Int {
	chainCfg, ok := c.Chains[chainID]
	if !ok {
		return big.NewInt(defaultMinQuoteAmount)
	}

	var tokenCfg *TokenConfig
	for _, cfg := range chainCfg.Tokens {
		if strings.EqualFold(cfg.Address, addr.String()) {
			cfgCopy := cfg
			tokenCfg = &cfgCopy
			break
		}
	}
	if tokenCfg == nil {
		return big.NewInt(defaultMinQuoteAmount)
	}
	quoteAmountFlt, ok := new(big.Float).SetString(tokenCfg.MinQuoteAmount)
	if !ok {
		return big.NewInt(defaultMinQuoteAmount)
	}
	if quoteAmountFlt.Cmp(big.NewFloat(0)) <= 0 {
		return big.NewInt(defaultMinQuoteAmount)
	}

	// Scale the minQuoteAmount by the token decimals.
	denomDecimalsFactor := new(big.Int).Exp(big.NewInt(10), big.NewInt(int64(tokenCfg.Decimals)), nil)
	quoteAmountScaled, _ := new(big.Float).Mul(quoteAmountFlt, new(big.Float).SetInt(denomDecimalsFactor)).Int(nil)
	return quoteAmountScaled
}

var defaultChainConfig = ChainConfig{
	DeadlineBufferSeconds: 600,
	OriginGasEstimate:     160000,
	DestGasEstimate:       100000,
	MinGasToken:           "0",
	QuotePct:              100,
	QuoteOffsetBps:        0,
	FixedFeeMultiplier:    1,
}

// getChainConfigValue gets the value of a field from ChainConfig.
// It returns the value from Chains[chainID] if non-zero,
// else from BaseChainConfig if non-zero,
// else from defaultChainConfig.
func (c Config) getChainConfigValue(chainID int, fieldName string) (interface{}, error) {
	chainConfig, ok := c.Chains[chainID]
	if ok {
		value, err := getFieldValue(chainConfig, fieldName)
		if err != nil {
			return nil, err
		}
		if isNonZero(value) {
			return value, nil
		}
	}

	baseValue, err := getFieldValue(c.BaseChainConfig, fieldName)
	if err != nil {
		return nil, err
	}
	if isNonZero(baseValue) {
		return baseValue, nil
	}

	defaultValue, err := getFieldValue(defaultChainConfig, fieldName)
	if err != nil {
		return nil, err
	}
	return defaultValue, nil
}

func getFieldValue(obj interface{}, fieldName string) (interface{}, error) {
	val := reflect.ValueOf(obj)
	fieldVal := val.FieldByName(fieldName)

	if !fieldVal.IsValid() {
		return nil, fmt.Errorf("invalid field: %s", fieldName)
	}

	return fieldVal.Interface(), nil
}

func isNonZero(value interface{}) bool {
	return reflect.ValueOf(value).Interface() != reflect.Zero(reflect.TypeOf(value)).Interface()
}

// GetDeadlineBufferSeconds returns the DeadlineBufferSeconds for the given chainID.
func (c Config) GetDeadlineBufferSeconds(chainID int) (seconds time.Duration, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "DeadlineBufferSeconds")
	if err != nil {
		return seconds, err
	}

	value, ok := rawValue.(int)
	if !ok {
		return seconds, fmt.Errorf("failed to cast DeadlineBufferSeconds to int")
	}
	seconds = time.Duration(value) * time.Second
	return seconds, nil
}

// GetOriginGasEstimate returns the OriginGasEstimate for the given chainID.
func (c Config) GetOriginGasEstimate(chainID int) (value int, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "OriginGasEstimate")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(int)
	if !ok {
		return value, fmt.Errorf("failed to cast OriginGasEstimate to int")
	}
	return value, nil
}

// GetDestGasEstimate returns the DestGasEstimate for the given chainID.
func (c Config) GetDestGasEstimate(chainID int) (value int, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "DestGasEstimate")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(int)
	if !ok {
		return value, fmt.Errorf("failed to cast DestGasEstimate to int")
	}
	return value, nil
}

// GetL1FeeChainID returns the L1FeeChainID for the given chainID.
func (c Config) GetL1FeeChainID(chainID int) (value uint32, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "L1FeeChainID")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(uint32)
	if !ok {
		return value, fmt.Errorf("failed to cast L1FeeChainID to int")
	}
	return value, nil
}

// GetL1FeeOriginGasEstimate returns the L1FeeOriginGasEstimate for the given chainID.
func (c Config) GetL1FeeOriginGasEstimate(chainID int) (value int, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "L1FeeOriginGasEstimate")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(int)
	if !ok {
		return value, fmt.Errorf("failed to cast L1FeeOriginGasEstimate to int")
	}
	return value, nil
}

// GetL1FeeDestGasEstimate returns the L1FeeDestGasEstimate for the given chainID.
func (c Config) GetL1FeeDestGasEstimate(chainID int) (value int, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "L1FeeDestGasEstimate")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(int)
	if !ok {
		return value, fmt.Errorf("failed to cast L1FeeDestGasEstimate to int")
	}
	return value, nil
}

// GetMinGasToken returns the MinGasToken for the given chainID.
func (c Config) GetMinGasToken(chainID int) (value string, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "MinGasToken")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(string)
	if !ok {
		return value, fmt.Errorf("failed to cast MinGasToken to int")
	}
	return value, nil
}

// GetQuotePct returns the QuotePct for the given chainID.
func (c Config) GetQuotePct(chainID int) (value float64, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "QuotePct")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(float64)
	if !ok {
		return value, fmt.Errorf("failed to cast QuotePct to int")
	}
	return value, nil
}

// GetQuoteOffsetBps returns the QuoteOffsetBps for the given chainID.
func (c Config) GetQuoteOffsetBps(chainID int) (value float64, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "QuoteOffsetBps")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(float64)
	if !ok {
		return value, fmt.Errorf("failed to cast QuoteOffsetBps to int")
	}
	return value, nil
}

// GetFixedFeeMultiplier returns the FixedFeeMultiplier for the given chainID.
func (c Config) GetFixedFeeMultiplier(chainID int) (value float64, err error) {
	rawValue, err := c.getChainConfigValue(chainID, "FixedFeeMultiplier")
	if err != nil {
		return value, err
	}

	value, ok := rawValue.(float64)
	if !ok {
		return value, fmt.Errorf("failed to cast FixedFeeMultiplier to int")
	}
	return value, nil
}

var _ IConfig = &Config{}
